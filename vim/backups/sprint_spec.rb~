require 'spec_helper'

describe Sprint, ".days" do
  it "returns the first element in days as the start date" do
    sprint = Sprint.new(:start_date => Date.new, :duration => 5)
    sprint.days.first.should eq("Start")
  end
  
  it "returns x day including start_date, where x is the duration specified" do
    sprint = Sprint.new(:start_date => Date.new, :duration => 10, :include_weekend => true)
    
    expected = ["Start"] + (1..10).to_a.collect{ |x| sprint.start_date + (x - 1).day }
    
    sprint.days.should eq(expected)
  end

  it "contains only week days if include_weekend is false" do
    sprint = Sprint.new(:start_date =>  Date.today, :duration => 10, :total_points => 25, :include_weekend => false)
    
    sprint.days.drop(1).any?{|x| x.weekend?}.should eq(false)
  end

  it 'does not break nb_daysprogressed when no progresses and include weekends is turned off' do
    sprint = Sprint.new(:start_date =>  Date.new(2013,01,30), :duration => 10, :total_points => 25, :include_weekend => false)
    sprint.stub(:today){Date.new(2013,02,02)}
    sprint.progresses.count.should eq 0
    sprint.nb_days_progressed.should eq 3
  end

  it "returns 2 as nb of days_progressed and is done" do
    sprint = Sprint.new(start_date: Date.today - 5.days, total_points: 50, duration: 10, include_weekend: true)

    sprint.progresses << Progress.new(apply_date: sprint.start_date + 1.day, points: 50)
    
    sprint.nb_days_progressed.should == 2
    sprint.done?.should == true
  end
end

describe Sprint, "find_last_week_day" do
  Sprint.find_last_week_day(Date.new(2013,02,02)).should == Date.new(2013,02,01)
  Sprint.find_last_week_day(Date.new(2013,02,03)).should == Date.new(2013,02,01)
  Sprint.find_last_week_day(Date.new(2013,02,04)).should == Date.new(2013,02,04)
end

describe Sprint, ".done?" do
  it "returns true when now is higher than the last day" do
    sprint = Sprint.new(:start_date => Date.today - 5.days, :duration => 4, :total_points => 25, :include_weekend => true)
    
    sprint.done?.should eq(true)
  end
  
  it "returns true there is no more points left" do
    sprint = Sprint.new(:start_date => Date.today, :duration => 4, :total_points => 25, :include_weekend => true)
    sprint.progresses << Progress.new(:points => 25, :apply_date => sprint.start_date)
    
    sprint.done?.should eq(true)
  end  
end

describe Sprint, ".x_title" do
  it "returns the current month of the sprint" do
    start_date = Date.new(2010, 5, 1)
    sprint = Sprint.new(:start_date =>  start_date, :duration => 4, :total_points => 25)
    
    sprint.x_title.should eq('May 2010')
  end
  
  it "returns two months if the sprint it split between two" do
    start_date = Date.new(2010, 5, 28)
    sprint = Sprint.new(:start_date =>  start_date, :duration => 10, :total_points => 25)
    
    sprint.x_title.should eq('May to June 2010')
  end

  it "returns two years if the sprint it split between two" do
    start_date = Date.new(2010, 12, 28)
    sprint = Sprint.new(:start_date =>  start_date, :duration => 10, :total_points => 25)
    
    sprint.x_title.should eq('December 2010 to January 2011')
  end
end

describe Sprint, ".name" do
  it "does not contain evil in any form" do
    sprint = Sprint.new(:start_date => Date.new, :duration => 5, :total_points => 25, :name => "heVilello")
    sprint.save
    
    Sprint.where(:name => "heVilello").size.should eq 0
  end
end

describe Sprint, ".velocity" do
  it "returns a velocity" do
    sprint = Sprint.new(:start_date => Date.new, :duration => 5, :total_points => 25, :name => "heVilello")
    sprint.progresses << Progress.new(:points => 13, :apply_date => sprint.days[1])
    sprint.progresses << Progress.new(:points => 10, :apply_date => sprint.days[2])
    sprint.save
    
    sprint.completed_points.should eq 23
  end

  it "returns the correct weekly velocity when we include weekends in a sprint" do
    sprint = Sprint.new(:start_date => Date.new, :duration => 14, :include_weekend => true, :total_points => 25, :name => "heVilello")
    sprint.progresses << Progress.new(:points => 13, :apply_date => sprint.days.first)
    sprint.progresses << Progress.new(:points => 10, :apply_date => sprint.start_date + 1.day)
    sprint.save
    
    sprint.weekly_velocity.should eq 11.5
  end

  it "returns a weekly velocity when we do not include weekends in a sprint" do
    sprint = Sprint.new(:start_date => Date.new, :duration => 14, :include_weekend => false, :total_points => 25, :name => "heVilello")
    sprint.progresses << Progress.new(:points => 13, :apply_date => sprint.days.first)
    sprint.progresses << Progress.new(:points => 10, :apply_date => sprint.start_date + 1.day)
    sprint.save
    
    sprint.weekly_velocity.should eq 8.21
  end
  
  it "returns true when the date is a weekend" do
      sunday = Date.new(2012, 12, 23)
      saturday = Date.new(2012, 12, 22)
      monday = Date.new(2012, 12, 24)

      saturday.weekend?.should be_true
      sunday.weekend?.should be_true
      monday.weekend?.should be_false
  end

  describe '#estimated_points_left' do
    it 'returns the last points of estimated line' do
      sprint = Sprint.new(:start_date => Date.today, :duration => 10, :include_weekend => true, :total_points => 50, :name => 'awawa')

      sprint.progresses << Progress.new(points: 5, apply_date: Date.today)
      
      sprint.estimated_points_left.should == sprint.estimated_progress.last
    end

    it "returns the last point of estimated_progress inverted" do
      sprint = Sprint.new(:start_date => Date.today, :duration => 10, :include_weekend => true, :total_points => 25, :name => 'awawa')

      sprint.progresses << Progress.new(points: 5, apply_date: Date.today)
      
      sprint.estimated_points_left.should == sprint.estimated_progress.last * -1
    end
  end

  describe '#estimated_duration' do
    it "returns the count in days of the first day that becomes 0" do
      sprint = Sprint.new(:start_date => Date.today, :duration => 10, :include_weekend => true, :total_points => 50, :name => 'awawa')

      sprint.progresses << Progress.new(points: 5, apply_date: sprint.start_date)
      
      expected = 10

      sprint.estimated_duration.should  == expected
    end

    it "returns the count in days of the first day that becomes less than 0" do
      sprint = Sprint.new(:start_date => Date.today, :duration => 10, :include_weekend => true, :total_points => 25, :name => 'awawa')

      sprint.progresses << Progress.new(points: 6, apply_date: sprint.start_date)
      
      expected = 5 

      sprint.estimated_duration.should  == expected
    end

    it "returns the count in days it would take even after the duration" do
      sprint = Sprint.new(:start_date => Date.today, :duration => 10, :include_weekend => true, :total_points => 25, :name => 'awawa')

      sprint.progresses << Progress.new(points: 1, apply_date: sprint.start_date)
      
      expected = 25 

      sprint.estimated_duration.should  == expected
    end

    it "returns nil if the ratio is 0" do
      sprint = Sprint.new(:start_date => Date.today, :duration => 10, :include_weekend => true, :total_points => 25, :name => 'awawa')

      sprint.estimated_duration.should be_nil
    end
  end

  describe '#estimated_day' do
    it "returns the day that the estimated_progression finishes" do
      sprint = Sprint.new(:start_date => Date.today, :duration => 10, :include_weekend => true, :total_points => 25, :name => 'awawa')

      sprint.progresses << Progress.new(points: 5, apply_date: sprint.start_date)

      sprint.estimated_day.should == sprint.start_date + 4.days
    end

    it "returns the good day even when include_weekend is false" do
      sprint = Sprint.new(:start_date => Date.new(2013, 2, 11), :duration => 10, :total_points => 25, :name => 'awawa')

      sprint.progresses << Progress.new(points: 1, apply_date: sprint.start_date)

      sprint.estimated_day.should == Date.new(2013, 3, 15)
    end

  end
end
