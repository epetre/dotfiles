require 'spec_helper'

describe Progress do
  it "fails validation with no apply_date (using error_on)" do
    Progress.new.should have(1).error_on(:apply_date)
  end

  it "fails validation with no points (using error_on)" do
    Progress.new.should have(2).error_on(:points)
  end
  
  it "fails validation with non integer points (using error_on)" do
    Progress.new(:points => 'a').should have(1).error_on(:points)
    Progress.new(:points => 1.5).should have(1).error_on(:points)
  end
  
  it "fails validation with non positive points (using error_on)" do
    Progress.new(:points => -5).should have(1).error_on(:points)
  end
  
  it "passes validation with positive points (using error_on)" do
    Progress.new(:points => 12).should have(0).error_on(:points)
  end
  
  it "fails validation when sum of points is higher than the sprint total points" do
    sprint = Sprint.new(:start_date => Date.new, :duration => 3, :total_points => 10)
    progresses = []
    progresses << Progress.new(:points => 5, :apply_date => sprint.start_date)
    progresses << Progress.new(:points => 5, :apply_date => sprint.days[1])
    last_progress = Progress.new(:points => 5, :apply_date => sprint.days.last)
    progresses << last_progress
    
    progresses.each{|p| p.sprint = sprint }
    sprint.progresses.concat progresses

    last_progress.should have(1).error_on(:points)
  end
  
  it "fails validation when apply_date is not part of sprint time span" do
    sprint = Sprint.new(:start_date => Date.new, :duration => 3, :total_points => 10, :include_weekend => true)
    progress = Progress.new(:points => 5, :apply_date => sprint.days.last + 1.day)
    progress.sprint = sprint
    sprint.progresses << progress
    sprint.progresses.last.should have(1).error_on(:apply_date)
  end

  it "fails validation when apply_date is not included in sprint days" do
    today = Date.today
    friday = (1..7).to_a.collect{|x| today + x.day}.find{|d| d.cwday == 5}
    
    sprint = Sprint.new(:start_date => friday, :duration => 3, :total_points => 10)
    progress = Progress.new(:points => 5, :apply_date => friday + 1.day)
    
    progress.sprint = sprint
    sprint.progresses << progress
    sprint.progresses.last.should have(1).error_on(:apply_date)
  end
  
  it "has a progress on the last day of progresses" do
    today = Date.today
    sprint = Sprint.new(:start_date => Date.new(2011, 12, 5), :duration => 5, :total_points => 23)
    
    sprint.progresses << Progress.new(:points => 7, :apply_date => sprint.start_date + 1.day)#Day 1
    sprint.progresses << Progress.new(:points => 4, :apply_date => sprint.start_date + 1.day)#Day 2
    sprint.progresses << Progress.new(:points => 10, :apply_date => sprint.start_date + 2.day)#Day 3
    sprint.progresses << Progress.new(:points => 2, :apply_date => sprint.start_date + 3.day) #Day 4
    
    assert_equal true, sprint.progresses.any? {|p| p.apply_date == Date.new(2011, 12, 8)}
  end
end
