class PivotalSprint < Sprint
 include Syncable
  before_update :update_duration
  attr_accessible :integration_id, :last_sync_date
  belongs_to :pivotal_team 
  has_many :pivotal_progresses, :autosave => true, :foreign_key => :sprint_id
      
  allow_delete false
  do_not_update :is_private, :include_weekend
 # we do that because duration is calculated with start and end date of pivotal
  def update_duration
    if include_weekend_changed? && !duration_changed?
      if include_weekend
        inc = 0
        new_duration = (0..duration).inject(0) do |sum, x|
          date = start_date + x.day
          sum += 1 unless date.weekend?
          sum  
        end
      else
        new_duration = (1..duration).inject(0) do |sum, x|
          date = start_date + sum.day
          while date.weekend? do
            sum += 1
            date = start_date + sum.day
          end
          sum + 1
        end
      end
      self.duration = new_duration 
    end
  end
  def children
    pivotal_progresses
  end
  def localized_last_sync_date
    DateHelper.localized_time self.last_sync_date, timezone
  end

  def self.model_name
    Sprint.model_name
  end
end
