require 'spec_helper'

describe 'Syncable' do
  class TestSync
    include Syncable  
    @@attributes =[:integration_id, :name, :email] 
    attr_accessor *@@attributes, :children

    def initialize(attrs = {})
      attrs.each do |k, v|
        instance_variable_set("@#{k}", v)
      end
    end
    def children
      @children || []
    end
    def attributes
      @@attributes
    end
    def self.accessible_attributes
      @@attributes  
    end
  end
  class TestSyncWithChildren < TestSync
  end
  it "is equivalent" do
    item1 = TestSync.new(:integration_id => '2', :name => 'name', :email => 'email@email.com')
    item2 = TestSync.new(:integration_id => '2', :name => 'name', :email => 'email@email.com')

    item1.equivalent_to?(item2).should be_true
  end

  it "is not equivalent" do
    item1 = TestSync.new(:integration_id => '3', :name => 'name', :email => 'email@email.com')
    item2 = TestSync.new(:integration_id => '2', :name => 'name', :email => 'email@email.com')

    item1.equivalent_to?(item2).should be_false
  end

  it "is not equivalent if the children are not equivalent" do
    item1 = TestSync.new(:integration_id => '3', :name => 'name', :email => 'email@email.com')
    item2 = TestSync.new(:integration_id => '3', :name => 'name', :email => 'email@email.com')
    
    item1.children = [TestSync.new]
    item2.children = []
    item1.equivalent_to?(item2).should be_false
  end

  it "is equivalent if the children are equivalent" do
    item1 = TestSync.new(:integration_id => '3', :name => 'name', :email => 'email@email.com')
    item2 = TestSync.new(:integration_id => '3', :name => 'name', :email => 'email@email.com')
    
    item1.children = [TestSync.new]
    item2.children = [TestSync.new]
    item1.equivalent_to?(item2).should be_true
  end
end
