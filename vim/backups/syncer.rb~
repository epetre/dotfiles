require 'thread'
require 'fetcher'

class Syncer
  def sync
    begin
      report = SyncReport.new start: Time.now
      users = PivotalUser.includes({subscriptions:  :plan}, :preference_sheet)
        .where("preference_sheets.integration_id IS NOT NULL AND preference_sheets.integration_id <> ''")

      fetched_users = Queue.new
      Parallel.each(users, in_threads: 10) do |u|
        fetcher = Fetcher.new u
        clone = fetcher.fetch
        fetched_users << clone unless clone.nil? 
      end

      writer = SyncWriter.new
      until fetched_users.empty? do
        user = fetched_users.pop
        to_save = nil
        begin
          raise "Sync error, the user is invalid" unless user.valid?
          to_save = writer.prepare(user)
          ActiveRecord::Base.transaction do
            to_save.save!
          end
        rescue Exception => e
          ex = ExceptionEmail.new(:exception => e, :subject => "Sync save error", :details => ["On user: #{user.inspect}"] )
          Notifier.error(ex).deliver
        end
      end

      report.duration = Time.now - report.start
      report.save
    rescue Exception => e
      ex = ExceptionEmail.new(:exception => e, :subject => "Sync general error", :details => [])
      Notifier.error(ex).deliver
    end
  end
end
