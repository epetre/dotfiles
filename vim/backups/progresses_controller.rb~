class ProgressesController < ApplicationController
  include Spy
  before_filter :load_sprint
  before_filter :load_progress, :only => [:new, :create]
  
  load_and_authorize_resource :progress
  helper 'errors'
  
  # GET /progresses
  # GET /progresses.xml
  def index
    if params.include? :year and params.include? :apply_date
      @progresses = @sprint.progresses.where(:apply_date => progress_date).order('apply_date DESC')
    else
      @progresses = @sprint.progresses.order('apply_date DESC') 
    end
    @progresses = @progresses.select{ |p| can? :read, p }


    respond_to do |format|
      format.html # index.html.erb
      format.xml  { render :xml => @progresses }
    end
  end

  # GET /progresses/1
  # GET /progresses/1.xml
  def show
    respond_to do |format|
      format.html # show.html.erb
      format.xml  { render :xml => @progress }
    end
  end

  # GET /progresses/new
  # GET /progresses/new.xml
  def new
    respond_to do |format|
      format.html 
      format.xml  { render :xml => @progress }
    end
  end

  # GET /progresses/1/edit
  def edit
  end

  # POST /progresses
  # POST /progresses.xml
  def create
    respond_to do |format|
      if @progress.save
        format.html { redirect_to team_sprint_path(@sprint.team, @sprint) }
        format.xml  { render :xml => [@progress], :status => :created, :location => @progress }
      else
        @error_messages = @progress.errors.full_messages
        format.html { render :action => :new }
        format.xml  { render :xml => @progress.errors, :status => :unprocessable_entity }
      end
    end
  end

  # PUT /progresses/1
  # PUT /progresses/1.xml
  def update    
    respond_to do |format|
      @progress.assign_attributes params[:progress]
      #assign_attributes_with_date
      if @progress.save
        format.html { redirect_to team_sprint_path(@sprint.team, @sprint) }
        format.xml  { head :ok }
      else
        @error_messages = @sprint.errors.full_messages.concat(@progress.errors.full_messages)
        format.html { render :action => "edit" }
        format.xml  { render :xml => @progress.errors, :status => :unprocessable_entity }
      end
    end
  end

  # DELETE /progresses/1
  # DELETE /progresses/1.xml
  def destroy
    @progress.destroy

    respond_to do |format|
      format.html { redirect_to([@sprint.team, @sprint, @progress]) }
      format.xml  { head :ok }
    end
  end

  protected
    def load_progress
      if params.include? :progress
        @progress = @sprint.progresses.build params[:progress]
      else
        @progress = Progress.new
        @progress.sprint = @sprint
      end
      @progress_date_choices = @sprint.days.drop(1).join('&')
    end

    def load_sprint
      @error_messages = []
      @team = Team.find(params[:team_id])
      @sprint = @team.sprints.find(params[:sprint_id])

      raise ActionController::RoutingError.new('Not Found') unless can? :read, @sprint
    end
end
